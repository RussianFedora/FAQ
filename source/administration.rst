.. Fedora-Faq-Ru (c) 2018 - 2019, EasyCoding Team and contributors
.. 
.. Fedora-Faq-Ru is licensed under a
.. Creative Commons Attribution-ShareAlike 4.0 International License.
.. 
.. You should have received a copy of the license along with this
.. work. If not, see <https://creativecommons.org/licenses/by-sa/4.0/>.
.. _administration:

***************************
Системное администрирование
***************************

.. index:: kernel, boot, kernel options
.. _kernelpm-once:

Как однократно передать параметр ядра?
=========================================

Для передачи параметра необходимо в меню загрузчика Grub 2 выбрать нужную строку и нажать клавишу **E** на клавиатуре для перехода к её редактированию, затем в конце строки, начинающейся с **linux**, через пробел дописать нужный параметр (или параметры), после чего нажать **Ctrl + X**, чтобы начать процесс загрузки.

.. index:: kernel, boot, kernel options
.. _kernelpm-perm:

Как мне задать параметр ядра для постоянного использования?
=================================================================

Необходимо открыть с шаблонами загрузчика ``/etc/default/grub`` в любом текстовом редакторе, найти в нём переменную ``GRUB_CMDLINE_LINUX`` и внести соответствующие правки. После этого нужно :ref:`пересобрать конфиг Grub 2 <grub-rebuild>` посредством **grub2-mkconfig**.

.. index:: kernel, boot, kernel options
.. _kernelpm-list:

Как определить какие параметры ядра заданы в настоящее время?
=================================================================

Для получения информации о текущих параметрах ядра достаточно выполнить:

.. code-block:: text

    cat /proc/cmdline

.. index:: kernel, kernel modules
.. _kernel-modules-list:

Как определить какие модули ядра в настоящее время загружены?
=================================================================

Для получения информации о загруженных модулях ядра следует применять **lsmod**:

.. code-block:: text

    lsmod

.. index:: kernel, kernel modules
.. _kernel-modules-help:

Как узнать какие опциональные параметры поддерживает конкретный модуль ядра?
================================================================================

Для получения краткой справочной информации о поддерживаемых параметрах конкретного модуля ядра необходимо использовать **modinfo**:

.. code-block:: text

    modinfo foo-bar

Здесь **foo-bar** - имя модуля, информацию о котором требуется вывести.

.. index:: order, boot, boot list, uefi
.. _uefi-list:

Как определить список загружаемых ОС в меню UEFI Boot из Fedora?
====================================================================

Выведем текущий список загрузки UEFI Boot при помощи утилиты **efibootmgr**:

.. code-block:: text

    sudo efibootmgr -v

.. index:: order, boot, boot order, uefi
.. _uefi-reorder:

Возможно ли изменить порядок загрузки в UEFI Boot из Fedora?
=================================================================

Выведем текущий :ref:`список загрузки UEFI Boot <uefi-list>`.

Изменим порядок по своему усмотрению:

.. code-block:: text

    sudo efibootmgr -o 0000,0002,0003,0001

Здесь **0000** и прочие -- строки из предыдущего вывода утилиты. Ведущие нули указывать не обязательно.

Изменения вступают в силу немедленно.

.. index:: boot, remove entry, uefi
.. _uefi-remove:

Как удалить ненужный пункт меню UEFI Boot из Fedora?
=======================================================

Выведем текущий :ref:`список загрузки UEFI Boot <uefi-list>`.

Удалим пункт **0002**:

.. code-block:: text

    sudo efibootmgr -b 0002 -B

Ведущие нули указывать не обязательно. Изменения вступают в силу немедленно.

.. index:: journal, journald
.. _journal-current:

Как мне посмотреть текущий журнал работы системы?
====================================================

Чтобы посмотреть журнал работы системы с момента загрузки, нужно выполнить:

.. code-block:: text

    journalctl -b

Чтобы посмотреть только журнал работы ядра (аналог dmesg):

.. code-block:: text

    journalctl -k

.. index:: journal, journald
.. _journal-history:

Как мне посмотреть журналы с прошлых загрузок?
====================================================

Вывести список всех загрузок:

.. code-block:: text

    journalctl --list-boots

Вывести содержимое журнала загрузки с идентификатором **X**:

.. code-block:: text

    journalctl -b -X

.. index:: journal, journald
.. _journal-tofile:

Как мне выгрузить журнал в файл?
======================================

Необходимо перенаправить поток стандартного вывода в файл:

.. code-block:: text

    journalctl -b > ~/abc.txt

Также можно воспользоваться утилитой fpaste для автоматической загрузки файла на сервис `fpaste.org <https://paste.fedoraproject.org/>`__:

.. code-block:: text

    journalctl -b | fpaste

При успешном выполнении будет создана ссылка для быстрого доступа.

.. index:: chroot
.. _chroot:

Как сделать chroot в установленную систему с LiveUSB?
===========================================================

Загружаемся с :ref:`Fedora LiveUSB <usb-flash>` и запускаем эмулятор терминала или переходим в виртуальную консоль (особой разницы не имеет).

Для начала создадим каталог для точки монтирования:

.. code-block:: text

    sudo mkdir /media/fedora

Смонтируем корневой раздел установленной ОС:

.. code-block:: text

    sudo mount -t ext4 /dev/sda3 /media/fedora

Здесь **/dev/sda3** - раздел, на котором установлена ОС, а **ext4** - его файловая система. Внесём соответствующие правки если это не так.

Переходим в каталог с корневой ФС и монтируем ряд необходимых для работы окружения виртуальных ФС:

.. code-block:: text

    cd /media/fedora
    sudo mount -t proc /proc proc
    sudo mount --rbind /sys sys
    sudo mount --make-rslave sys
    sudo mount --rbind /dev dev
    sudo mount --make-rslave dev
    sudo mount -t tmpfs tmpfs tmp

При необходимости смонтируем ``/boot`` и ``/boot/efi`` разделы:

.. code-block:: text

    sudo mount -t ext4 /dev/sda2 boot
    sudo mount -t vfat /dev/sda1 boot/efi

Теперь осуществим вход в chroot:

.. code-block:: text

    sudo chroot /media/fedora

Выполняем нужные действия, а по окончании завершаем работу chroot окружения:

.. code-block:: text

    logout

Отмонтируем раздел:

.. code-block:: text

    sudo umount /media/fedora

.. index:: drivers, nut, ups
.. _configure-ups:

Как настроить ИБП (UPS) в Fedora?
====================================

См. `здесь <https://www.easycoding.org/2012/10/01/podnimaem-nut-v-linux.html>`__.

.. index:: journald, journal, limits
.. _journald-limit:

Системные журналы занимают слишком много места. Как их ограничить?
=====================================================================

См. `здесь <https://www.easycoding.org/2016/08/24/ogranichivaem-sistemnye-zhurnaly-v-fedora-24.html>`__.

.. index:: journald, journal, clean, wipe
.. _journald-wipe:

Как немедленно очистить все системные журналы?
=================================================

Выполним принудительную ротацию системных журналов для сброса их из памяти на диск:

.. code-block:: text

    sudo journalctl --rotate

Очистим все записи с диска, старше 1 секунды:

.. code-block:: text

    sudo journalctl --vacuum-time=1s

.. index:: systemd
.. _systemd-info:

Что такое systemd и как с ним работать?
==========================================

См. `здесь <https://www.easycoding.org/2017/11/05/upravlyaem-systemd-v-fedora.html>`__.

.. index:: fs, caches, flush
.. _drop-fs-caches:

Как очистить кэши и буферы всех файловых систем?
===================================================

Чтобы очистить кэши и буферы нужно выполнить:

.. code-block:: text

    sync && echo 3 > /proc/sys/vm/drop_caches && sync

.. index:: timezone, utc, hardware clock
.. _system-time-utc:

Как настроить системные часы в UTC или локального времени и наоборот?
========================================================================

Переключение аппаратных часов компьютера в UTC из localtime:

.. code-block:: text

    sudo timedatectl set-local-rtc no

Переключение аппаратных часов компьютера в localtime из UTC:

.. code-block:: text

    sudo timedatectl set-local-rtc yes

.. index:: timezone, utc, hardware clock
.. _windows-utc:

У меня в дуалбуте с Fedora установлена Windows и часы постоянно сбиваются. В чём дело?
=========================================================================================

Чтобы такого не происходило, обе операционные системы должны хранить время в формате UTC. Для этого в Windows нужно применить следующий файл реестра:

.. code-block:: ini

    Windows Registry Editor Version 5.00

    [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation]
    "RealTimeIsUniversal"=dword:00000001

.. index:: dm change, dm, display manager, sddm, gdm
.. _change-dm:

У меня в системе используется GDM, но я хочу заменить его на SDDM. Это возможно?
==================================================================================

Установка SDDM:

.. code-block:: text

    sudo dnf install sddm

Отключение GDM и активация SDDM:

.. code-block:: text

    sudo systemctl -f enable sddm

Изменения вступят в силу при следующей загрузке системы.

.. index:: dnf, java, alternatives, multiple, openjdk
.. _alternatives-java:

Как мне выбрать версию Java по умолчанию?
==============================================

Для выбора дефолтной :ref:`версии Java <java-multiple>` следует использовать систему альтернатив:

.. code-block:: text

    sudo update-alternatives --config java

.. index:: console, change hostname, hostname
.. _change-hostname:

Как изменить имя хоста?
==========================

Изменение имени хоста возможно посредством **hostnamectl**:

.. code-block:: text

    hostnamectl set-hostname NEW

Здесь вместо **NEW** следует указать новое значение. Изменения вступят в силу немедленно.

.. index:: filesystem, check, lvm, fsck
.. _fs-check-lvm:

Как мне проверить ФС в составе LVM с LiveUSB?
==================================================

Если файловая система была повреждена, необходимо запустить **fsck** и разрешить ему исправить её. При использовании настроек по умолчанию (LVM, ФС ext4) это делается так:

.. code-block:: text

    sudo fsck -t ext4 /dev/mapper/fedora-root
    sudo fsck -t ext4 /dev/mapper/fedora-home

Если вместо ext4 применяется другая файловая система, необходимо указать её после параметра **-t**.

.. index:: filesystem, check, partitions, fsck
.. _fs-check-partitions:

Как мне проверить ФС при использовании классических разделов с LiveUSB?
==========================================================================

Если используется классическая схема с обычными разделами, то утилите **fsck** необходимо передавать соответствующее блочное устройство, например:

.. code-block:: text

    sudo fsck -t ext4 /dev/sda2
    sudo fsck -t ext4 /dev/sda3

Если вместо **ext4** применяется другая файловая система, необходимо указать её после параметра **-t**. Также вместо **/dev/sda2** следует прописать соответствующее блочное устройство с повреждённой ФС.

Полный список доступных устройств хранения данных можно получить:

.. code-block:: text

    sudo fdisk -l


.. index:: filesystem, check, luks, fsck
.. _fs-check-luks:

Как мне проверить ФС на зашифрованном LUKS разделе с LiveUSB?
================================================================

Если используются зашифрованные LUKS разделы, то сначала откроем соответствующее устройство:

.. code-block:: text

    sudo cryptsetup luksOpen /dev/sda2 luks-root

Здесь вместо **/dev/sda2** следует прописать соответствующее блочное устройство зашифрованного накопителя.

Теперь запустим проверку файловой системы:

.. code-block:: text

    sudo fsck -t ext4 /dev/mapper/luks-root

Если вместо **ext4** применяется другая файловая система, необходимо указать её после параметра **-t**.

По окончании обязательно отключим LUKS том:

.. code-block:: text

    sudo cryptsetup luksClose /dev/mapper/luks-root

.. index:: memory deduplication, memory, deduplication
.. _deduplication-memory:

Возможна ли полная дедупликация оперативной памяти?
=======================================================

Да, дедупликация памяти `поддерживается <https://www.ibm.com/developerworks/linux/library/l-kernel-shared-memory/index.html>`__ в ядре Linux начиная с версии 2.6.32 модулем `KSM <https://ru.wikipedia.org/wiki/KSM>`__ и по умолчанию применяется лишь в системах виртуализации, например в :ref:`KVM <kvm>`.

.. index:: disk deduplication, disk, deduplication
.. _deduplication-disk:

Возможна ли полная дедупликация данных на дисках?
=====================================================

Полная автоматическая дедупликация данных на дисках `поддерживается <https://btrfs.wiki.kernel.org/index.php/Deduplication>`__ лишь файловой системой :ref:`BTRFS <fs-btrfs>`.

.. index:: zram, memory compression, ram, memory
.. _memory-compression:

Можно ли включить сжатие оперативной памяти?
================================================

Да, в ядро Linux, начиная с версии 3.14, по умолчанию входит модуль zram, который позволяет увеличить производительность системы посредством использования вместо дисковой подкачки виртуального устройства в оперативной памяти с активным сжатием.

Включение zram в Fedora:

.. code-block:: text

    sudo systemctl enable --now zram-swap

Отключение zram в Fedora:

.. code-block:: text

    sudo systemctl stop zram-swap
    sudo systemctl disable zram-swap

Допускается :ref:`изменить размера пула <zram-pool-size>` сжатия памяти.

После использования вышеуказанных команд рекомендуется выполнить перезагрузку системы.

.. index:: sysctl, kernel option
.. _sysctl-temporary:

Как временно изменить параметр sysctl?
==========================================

Временно установить любой параметр ядра возможно через sysctl:

.. code-block:: text

    sudo sysctl -w foo.bar=X

Здесь **foo.bar** имя параметра, а **X** - его значение. Изменения вступят в силу немедленно и сохранятся до перезагрузки системы.

.. index:: sysctl, kernel option
.. _sysctl-permanent:

Как задать и сохранить параметр sysctl?
===========================================

Чтобы сохранить параметр ядра, создадим специальный файл ``99-foobar.conf`` в каталоге ``/etc/sysctl.d``:

.. code-block:: text

    foo.bar1=X1
    foo.bar2=X2

Каждый параметр должен быть указан с новой строки. Здесь **foo.bar** имя параметра, а **X** - его значение.

Для вступления изменений в силу требуется перезагрузка:

.. code-block:: text

    sudo systemctl reboot

.. index:: sysctl, kernel option
.. _sysctl-order:

В каком порядке загружаются sysctl файлы настроек?
======================================================

При загрузке ядро проверяет следующие каталоги в поисках **.conf** файлов:

 1. ``/usr/lib/sysctl.d`` - предустановленные конфиги системы и определённых пакетов;
 2. ``/run/sysctl.d`` - различные конфиги, сгенерированные в рантайме;
 3. ``/etc/sysctl.d`` - пользовательские конфиги.

Порядок выполнения - в алфавитном порядке, поэтому для его изменения многие конфиги содержат цифры и буквы. Например конфиг ``00-foobar.conf`` выполнится раньше, чем ``zz-foobar.conf``.

.. index:: text mode, runlevel, boot
.. _configure-runlevel:

Как переключить запуск системы в текстовый режим и обратно?
===============================================================

Чтобы активировать запуск Fedora в текстовом режиме, нужно переключиться на цель ``multi-user.target``:

.. code-block:: text

    sudo systemctl set-default multi-user.target

Чтобы активировать запуск в графическом режиме, необходимо убедиться в том, что установлен какой-либо менеджер графического входа в систему (GDM, SDDM, LightDM и т.д.), а затем переключиться на цель ``graphical.target``:

.. code-block:: text

    sudo systemctl set-default graphical.target

Определить используемый в настоящее время режим можно так:

.. code-block:: text

    systemctl get-default

Изменения вступят в силу лишь после перезапуска системы:

.. code-block:: text

    sudo systemctl reboot

.. index:: swap, pagefile
.. _swap-to-file:

Как настроить подкачку в файл в Fedora?
===========================================

Создадим файл подкачки на 4 ГБ:

.. code-block:: text

    sudo dd if=/dev/zero of=/media/pagefile count=4096 bs=1M

Установим правильный chmod:

.. code-block:: text

    sudo chmod 600 /media/pagefile

Подготовим swapfs к работе:

.. code-block:: text

    sudo mkswap /media/pagefile

Активируем файл подкачки:

.. code-block:: text

    sudo swapon /media/pagefile

Для того, чтобы подкачка подключалась автоматически при загрузке системы, откроем файл ``/etc/fstab`` и добавим в него следующую строку:

.. code-block:: text

    /media/pagefile    none    swap    sw    0    0

Действия вступят в силу немедленно.

.. index:: disk usage, disk monitor
.. _disk-usage:

Как узнать какой процесс осуществляет запись на диск?
==========================================================

Для мониторинга дисковой активности существуют улититы **iotop** и **fatrace**. Установим их:

.. code-block:: text

    sudo dnf install iotop fatrace

Запустим iotop в режиме накопления показаний:

.. code-block:: text

    sudo iotop -a

Запустим fatrace в режиме накопления с выводом лишь информации о событиях записи на диск:

.. code-block:: text

    sudo fatrace -f W

Запустим fatrace в режиме накопления с выводом информации о событиях записи на диск в файл в течение 10 минут (600 секунд):

.. code-block:: text

    sudo fatrace -f W -o ~/disk-usage.log -s 600

.. index:: drive, label, disk
.. _change-label:

Как сменить метку раздела?
==============================

Смена метки раздела с файловой системой ext2, ext3 и ext4:

.. code-block:: text

    sudo e2label /dev/sda1 "NewLabel"

Смена метки раздела с файловой системой XFS:

.. code-block:: text

    sudo xfs_admin -L "NewLabel" /dev/sda1

Здесь **/dev/sda1** - раздел, на котором требуется изменить метку.

.. index:: drive, uuid, disk
.. _get-uuid:

Как получить UUID всех смонтированных разделов?
===================================================

Для получения всех UUID можно использовать утилиту **blkid**:

.. code-block:: text

    sudo blkid

Вывод UUID для указанного раздела:

.. code-block:: text

    sudo blkid /dev/sda1

Здесь **/dev/sda1** - раздел, для которого требуется вывести UUID.

.. index:: drive, uuid, disk
.. _change-uuid:

Как изменить UUID раздела?
==============================

Смена UUID раздела с файловой системой ext2, ext3 и ext4:

.. code-block:: text

    sudo tune2fs /dev/sda1 -U $(uuidgen)

Смена UUID раздела с файловой системой XFS:

.. code-block:: text

    sudo xfs_admin -U generate /dev/sda1

Здесь **/dev/sda1** - раздел, на котором требуется изменить UUID.

.. index:: pid, process, id
.. _get-pid:

Как получить PID запущенного процесса?
==========================================

Для получения идентификатора запущенного процесса (PID), следует применять утилиту **pidof**:

.. code-block:: text

    pidof foo-bar

Здесь вместо **foo-bar** следует указать имя образа процесса, информацию о котором требуется получить.

.. index:: process, kill, signal, sigterm
.. _kill-sigterm:

Как правильно завершить работу процесса?
===========================================

Для того, чтобы завершить работу процесса, необходимо отправить ему сигнал **SIGTERM**. После получения данного сигнала процесс должен немедленно начать завершение своей работы:

 * остановить активные потоки;
 * сообщить порождённым им процессам (потомкам) о том, что он завершает свою работу;
 * закрыть все открытые процессом дескрипторы;
 * освободить все занятые процессом ресурсы;
 * вернуть управление операционной системе.

Чтобы отправить сигнал SIGTERM процессу с определённым :ref:`PID <get-pid>`, воспользуемся утилитой **kill**:

.. code-block:: text

    kill -15 XXXX

Здесь **XXXX** - PID нужного процесса.

Вместо явного указания PID процесса существует возможность завершить работу процесса с указанным именем посредством **killall**:

.. code-block:: text

    killall -15 foo-bar

Здесь вместо **foo-bar** следует указать имя образа процесса, который требуется завершить, однако её следует применять с особой осторожностью ибо если существует несколько процессов с одинаковым названием, все они будут завершены.

.. index:: process, kill, signal, sigkill
.. _kill-sigkill:

Как принудительно завершить работу процесса?
===============================================

Если какой-либо процесс завис и не отвечает на требование завершения посредством :ref:`SIGTERM <kill-sigterm>`, можно заставить операционную систему принудительно завершить его работу сигналом **SIGKILL**, который не может быть перехвачен и проигнорирован процессом.

Данный сигнал следует использовать с особой осторожностью, т.к. в этом случае процесс не сможет корректно освободить все дескрипторы и занятые ресурсы, а также сообщить своим потомкам о своём завершении, что может повлечь за собой появление т.н. :ref:`процессов-сирот <process-orphan>`.

Чтобы отправить сигнал SIGKILL процессу с определённым :ref:`PID <get-pid>`, воспользуемся утилитой **kill**:

.. code-block:: text

    kill -9 XXXX

Здесь **XXXX** - PID нужного процесса.

Вместо явного указания PID процесса существует возможность завершить работу процесса с указанным именем посредством **killall**:

.. code-block:: text

    killall -9 foo-bar

Здесь вместо **foo-bar** следует указать имя образа процесса. Если существует несколько процессов с одинаковым названием, все они будут завершены.

.. index:: process, zombie
.. _process-zombie:

Что такое процесс-зомби?
===========================

Процессы-зомби появляются в системе если потомок завершил свою работу раньше родительского процесса, а последний не отрегировал на отправленный ему сигнал **SIGCHLD**.

Такие процессы не занимают ресурсов в системе (ибо успешно завершили свою работу), за исключением строки в таблице процессов, хранящей его :ref:`PID <get-pid>`.

Все зомби будут автоматически удалены из таблицы процессов после того, как завершит свою работу их родитель.

.. index:: process, orphan, sigkill
.. _process-orphan:

Что такое процесс-сирота?
============================

Процессы-сироты появляются в системе если их родитель был аварийно уничтожен системой сигналом :ref:`SIGKILL <kill-sigkill>` и не смог сообщить своим потомкам о своём завершении работы.

В отличие от :ref:`зомби <process-zombie>`, такие процессы расходуют ресурсы системы и могут быть источником множества проблем.

При обнаружении таких процессов система выполняет операцию переподчинения и устанавливает их родителем главный процесс инициализации.

.. index:: containers, docker, podman
.. _docker-fedora:

Как правильно установить Docker в Fedora?
=============================================

Вместо Docker в Fedora рекомендуется установить и использовать Podman, т.к. он не требует прав суперпользователя для работы:

.. code-block:: text

    sudo dnf install podman

Синтаксис команд аналогичен Docker.

.. index:: kernel, option, settings, parameters
.. _kernel-bs:

Как определить включена ли определённая опция ядра во время компиляции?
==========================================================================

Полный список опций, заданных на этапе компиляции ядра, всегда можно найти в config-файлах, внутри каталога ``/boot``.

В качестве примера проверим статус опции ``CONFIG_EFI_STUB`` текущего ядра:

.. code-block:: text

    grep CONFIG_EFI_STUB /boot/config-$(uname -r)

В выводе **y** означает, что опция была включена, а **not set**, соответственно, выключена.

.. index:: kernel, irq, interrupts
.. _ksoftirqd:

Процесс ksoftirqd съедает все ресурсы системы. Что делать?
=============================================================

Ядро операционной системы взаимодействует с устройствами посредством прерываний. Когда возникает новое прерывание, оно немедленно приостанавливает работу текущего выполняемого процесса, переключается в режим ядра и начинает его обработку.

Может случиться так, что прерывания будут генерироваться настолько часто, что ядро не сможет их обрабатывать немедленно, в порядке получения. На этот случай имеется специальный механизм, помещающий полученные прерывания в очередь для дальнейшей обработки. Этой очередью управляет особый поток ядра **ksoftirqd** (создаётся по одному на каждый имеющийся процессор или ядро многоядерного процессора).

Если потоки ядра ksoftirqd потребляют значительное количество ресурсов центрального процессора, значит система находится под очень высокой нагрузкой по прерываниям.

.. index:: kernel, irq, interrupts
.. _kernel-irq:

Как определить какое устройство генерирует огромное количество прерываний?
=============================================================================

Для диагностики системы обработки прерываний, ядро имеет встроенный механизм:

.. code-block:: text

    cat /proc/interrupts

Числа в таблице означают точное количество прерываний, инициированных соответствующим устройством или подсистемой, с момента загрузки.

.. index:: kernel, irq, interrupts
.. _irq-manual:

Как произвести ручную балансировку прерываний?
=================================================

Если :ref:`прерывания <kernel-irq>` распределены между процессорными ядрами не равномерно, можно использовать режим ручной балансировки:

.. code-block:: text

    sudo bash -c "echo X > /proc/irq/Y/smp_affinity"

Здесь **X** - маска процессора (CPU affinity), который будет обрабатывать данное прерывание, а **Y** - номер прерывания (указан в левом столбце таблицы прерываний).

Чтобы вычислить маску следует возвести число 2 в степень, равную порядкому номеру процессора, и результат перевести в шестнадцатиричную систему счисления.

.. index:: file, limit, descriptor
.. _fd-limit:

При работе приложения возникает ошибка Too many open files. Что делать?
===========================================================================

Ошибка *Too many open files* возникает при превышении количества открытых дескрипторов файлов процессом. Для её исправления, нужно :ref:`увеличить это ограничение <fd-increase>`.

.. index:: file, limit, descriptor, ulimit
.. _fd-hard-soft:

Как узнать текущий лимит открытых файловых дескрипторов?
===========================================================

Существует два типа ограничений: мягкий (soft) и жёсткий (hard). Жёсткий задаётся администратором системы, а мягкий может регулироваться как пользователем, так и запущенным приложением, но не может превышать максимально заданное значение жёсткого лимита, а также :ref:`глобальное для всего ядра <fd-kernel>`.

Получим значение мягкого ограничителя:

.. code-block:: text

    ulimit -Sn

Получим значение жёсткого ограничителя:

.. code-block:: text

    ulimit -Hn

Значения по умолчанию **1024** (soft) и **4096** (hard).

.. index:: file, limit, descriptor, kernel
.. _fd-kernel:

Как узнать глобальный лимит открытых файловых дескрипторов?
==============================================================

Наряду с :ref:`мягким и жёстким лимитами <fd-hard-soft>` открытых файловых дескрипторов существует и глобальный, который ядро Linux способно адресовать и корректно обработать.

Выведем это значение при помощи соответствующей функции ядра:

.. code-block:: text

    cat /proc/sys/fs/file-max

.. index:: file, limit, descriptor, kernel, security, pam
.. _fd-increase:

Как увеличить лимит открытых файловых дескрипторов?
======================================================

:ref:`Мягкие и жёсткие лимиты <fd-hard-soft>` на количество дескрипторов открытых файлов задаются в файле ``/etc/security/limits.conf`` суперпользователем, но при этом не могут превышать :ref:`глобальный <fd-kernel>`.

Увеличим ограничение для пользователя **foo-bar** до 8192/2048:

.. code-block:: text

    foo-bar       soft    nofile          2048
    foo-bar       hard    nofile          8192

Увеличим ограничение для любых пользователей до 8192/2048:

.. code-block:: text

    *       soft    nofile          2048
    *       hard    nofile          8192

Изменения вступят в силу при следующем входе в систему.

.. index:: cpu, affinity, task, cpu core, process
.. _task-affinity:

Как запустить процесс так, чтобы он мог использовать лишь определённые ядра процессора?
===========================================================================================

По умолчанию процесс выполняется на любых доступных для Linux процессорах (или их ядрах).

Выбором наиболее подходящего ядра CPU для каждого потока процесса занимается непосредственно ядро, однако существует возможность и ручного переопределения.

Запустим приложение **foo-bar** на каждом чётном ядре (нумерация всегда начинается с нуля):

.. code-block:: text

    taskset -a -c 0,2,4,6 foo-bar

Изменим ассоциацию ядер для уже запущенного процесса **foo-bar** (в качестве параметра указывается :ref:`PID необходимого процесса <get-pid>`):

.. code-block:: text

    taskset -a -c 1,3,5,7 -p $(pidof foo-bar)

.. index:: cpu, nice, renice, task, process, priority
.. _task-priority:

Как изменить приоритет процесса?
===================================

Допустимые значения приоритета находятся в диапазоне от -20 (наиболее высокий приоритет) до 19 (наиболее низкий). Отрицательные значения может устанавливать лишь суперпользователь.

Запустим приложение **foo-bar** с приоритетом **10**:

.. code-block:: text

    nice -n 10 foo-bar

Изменим приоритет запущенного процесса **foo-bar** (в качестве параметра указывается :ref:`PID необходимого процесса <get-pid>`) до **8**:

.. code-block:: text

    renice -n 8 -p $(pidof foo-bar)

.. index:: user id, effective user id, real user id, id, uid
.. _euid-vs-ruid:

Чем отличается Effective UID процесса от Real UID?
====================================================

В мире UNIX считается нормальным, когда один процесс запускается от одного пользователя, но при этом получает права совсем другого (чаще всего это суперпользователь root).

В качестве простого примера рассмтрим ситуацию, когда пользователь **user1** запускает бинарник с установленным suid-битом **/usr/bin/foo-bar**. Таким образом, у процесса **foo-bar** в качестве *Real user ID* будет установлен **user1**, а *Effective user ID* - **root**. Это сделано для того, чтобы приложение могло самостоятельно отказаться от повышенных прав, либо переключаться между ними при помощи соответствующего системного вызова.

.. index:: data, copy, rsync
.. _copying-data:

Как скопировать данные с одного раздела на другой?
=====================================================

Для копирования файлов с одного раздела на другой лучше всего использовать утилиту **rsync** с опциями на сохранение прав доступа.

Загрузимся с :ref:`Fedora LiveUSB <usb-flash>`, затем смонтируем старый и новый разделы:

.. code-block:: text

    sudo mkdir /media/old-root
    sudo mount -t ext4 /dev/sda1 /media/old-root
    sudo mkdir /media/new-root
    sudo mount -t ext4 /dev/sdb1 /media/new-root

Запустим процесс копирования:

.. code-block:: text

    sudo rsync -axHAWXS --numeric-ids --info=progress2 /media/old-root/ /media/new-root/

По окончании работы обязательно размонтируем оба раздела:

.. code-block:: text

    sudo umount /media/old-root
    sudo umount /media/new-root

.. index:: chmod, immutable, access control, file, chattr
.. _chmod-immutable:

Как запретить модификацию файла даже владельцу и суперпользователю?
======================================================================

Чтобы запретить модификацию файла (изменение, удаление) любым пользователем (включая владельца и суперпользователя), установим ему расширенный атрибут ``+i``:

.. code-block:: text

    sudo chattr +i foo-bar.txt

Чтобы отменить произведённые изменения, выполним:

.. code-block:: text

    sudo chattr -i foo-bar.txt

Управлять расширенными атрибутами может лишь суперпользователь.

.. index:: chmod, chattr, access control, lsattr
.. _chmod-lsattr:

Как узнать какие расширенные атрибуты применены для конкретного файла?
=========================================================================

Для получения расширенных атрибутов воспользуемся утилитой **lsattr**:

.. code-block:: text

    lsattr foo-bar.txt

.. index:: chmod, access control, file, chattr
.. _chmod-addonly:

Как разрешить лишь дописывать данные в файл?
===============================================

Чтобы разрешить лишь добавление данных в файл любым пользователем (включая владельца и суперпользователя), установим ему расширенный атрибут ``+a``:

.. code-block:: text

    sudo chattr +a foo-bar.txt

Чтобы отменить произведённые изменения, выполним:

.. code-block:: text

    sudo chattr -a foo-bar.txt

.. index:: ssh, config, alias
.. _ssh-alias:

Как создать алиасы для быстрого подключения к SSH серверам?
==============================================================

OpenSSH позволяет создавать неограниченное количество алиасов для быстрых подключений:

.. code-block:: text

    Host foo
        HostName example1.org
        Port 22
        User user1

    Host bar
        HostName example2.org
        Port 22
        User user2
        IdentityFile ~/.ssh/id_rsa2

Для каждого могут быть указаны индивидуальные настройки, включая :ref:`различные SSH ключи <ssh-keys>`.

Подключимся к первому серверу:

.. code-block:: text

    ssh foo

Подключимся ко второму серверу:

.. code-block:: text

    ssh bar

.. index:: file system, fuse
.. _fuse-info:

Что такое FUSE?
==================

FUSE (file system in userspace) - это модуль ядра и набор утилит для работы с ним, предназначенные для запуска различных файловых систем в пользовательском пространстве.

Благодаря FUSE в Fedora могут использоваться файловые системы, которые по какой-либо причине не могут войти напрямую в состав ядра Linux из-за лицензионных проблем, либо патентов.

Некоторые примеры подобных реализаций:

  * :ref:`exFAT <fedora-exfat>`;
  * :ref:`MTP <fuse-mtp>`;
  * NTFS;
  * ZFS;
  * SSHFS;
  * WebDAV.

Из-за работы в пользовательском режиме возникает ряд проблем:

  * очень медленная работа за счёт постоянных переключений контекста;
  * в зависимости от параметров монтирования может быть не видна для работающих системных сервисов.

.. index:: kerberos, remote, login, authorization
.. _kerberos-auth:

Как авторизоваться на удалённой системе с использованием Kerberos?
=====================================================================

Установим необходимые пакеты для работы с Kerberos 5:

.. code-block:: text

    sudo dnf install krb5-workstation

Произведём авторизацию на удалённой системе:

.. code-block:: text

    kinit foo-bar@FEDORAPROJECT.ORG

Здесь **foo-bar** - логин на удалённой системе, а **FEDORAPROJECT.ORG** - имя домена (должно быть указано строго в верхнем регистре).

В случае ввода верных авторизационных данных процесс должен пройти в штатном режиме.

.. index:: kerberos, remote, login, authorization, renewal
.. _kerberos-renew:

Как обновить Kerberos-тикет?
===============================

В зависимости от настроек сервера, полученный :ref:`Kerberos-тикет <kerberos-auth>` обычно действует в течение 24 часов, затем даётся ещё от 24 до 48 часов для его обновления без необходимости прохождения повторной процедуры авторизации.

Проверим актуальность Kerberos тикетов:

.. code-block:: text

    klist -A

При необходимости обновим необходимый:

.. code-block:: text

    kinit -R foo-bar@FEDORAPROJECT.ORG

Здесь **foo-bar** - логин на удалённой системе, а **FEDORAPROJECT.ORG** - имя домена (должно быть указано строго в верхнем регистре).

.. index:: file, delete, inode
.. _delete-inode:

В каталоге появился файл с некорректным именем, который не удаётся удалить. Что делать?
==========================================================================================

Файлы с некорректными именами могут возникать при повреждениях файловой системы, либо сбоях в приложениях, которые создали их.

Штатно такие файлы удалить не удастся, поэтому придётся уничтожить соответствующий данному файлу I-узел (I-Node).

Перейдём в каталог с удаляемым файлом:

.. code-block:: text

    cd ~/foo-bar

Выведем листинг содержимого каталога с включённым отображением номеров I-узлов:

.. code-block:: text

    ls -li

Найдём в выводе необходимый файл и сохраним значение его I-узла. Теперь мы можем удалить его:

.. code-block:: text

    find . -maxdepth 1 -type f -inum XXXXXXX -delete

Здесь **XXXXXXX** - номер I-узла некорректного файла.

.. index:: ext4, defragmentation
.. _defrag-info:

Нужно ли выполнять дефрагментацию для разделов с ФС ext4?
============================================================

В большинстве случаев дефрагментация диска на разделах с файловой системой ext4 не требуется, т.к. драйвер осуществляет предварительное размещение файлов на свободном месте так, чтобы они заняли его целиком, оставляя при этом небольшой участок пространства для дальнейшего расширения.

Однако при определённых обстоятельствах (например если точный размер при создании неизвестен, либо в него постоянно производится добавление-удаление данных), некоторые файлы могут фрагментироваться.

.. index:: ext4, defragmentation, e4defrag, e2fsprogs
.. _defrag-custom:

Как выполнить дефрагментацию отдельных файлов на разделе ФС ext4?
====================================================================

Для выполнения частичной дефрагментации, можно использовать утилиту **e4defrag**, входящую в пакет **e2fsprogs**.

Данная утилита работает со **смонтированным** диском, т.к. непосредственно дефрагментацией будет заниматься драйвер файловой системы, а утилита лишь укажет ему цели.

Разрешается выполнять оптимизацию отдельных файлов, либо всего содержимого указанных каталогов.

Выполним дефрагментацию крупной базы данных ``/var/db/foo-bar.db``:

.. code-block:: text

    sudo e4defrag /var/db/foo-bar.db

Выполним дефрагментацию всего корня:

.. code-block:: text

    sudo e4defrag /

.. index:: ext4, defragmentation, fsck
.. _defrag-full:

Как выполнить дефрагментацию всего раздела с ФС ext4?
========================================================

Полную дефрагментацию можно осуществить при помощи средства :ref:`проверки диска <fs-check-lvm>` на **размонтированном** разделе, например при запуске с :ref:`Fedora LiveUSB <usb-flash>`.

Запустим процесс:

.. code-block:: text

    sudo fsck -t ext4 -fn /dev/sda2

Здесь **/dev/sda2** - раздел, на котором следует провести процесс дефрагментации. Операция займёт достаточно много времени (в зависимости от размера диска). Прерывать её не следует, т.к. это может привести к полной потере данных.

.. index:: cpu, core, grep, awk, uniq
.. _cpu-cores:

Как определить количество доступных процессоров или ядер?
============================================================

*Основной способ.* Применим утилиту **nproc**:

.. code-block:: text

    nproc --all

Без параметра ``--all`` будет указано лишь количество :ref:`доступных процессоров <task-affinity>` лишь для данного пользователя/процесса.

*Альтернативный способ.* Если указанная выше утилита в системе отсутствует, выполним:

.. code-block:: text

    cat /proc/cpuinfo | grep 'cpu cores' | uniq | awk '{ print $4 }'

.. index:: bash, pipelines, pipe
.. _bash-pipelines:

Как перенаправить стандартный ввод-вывод в файлы?
====================================================

Перенаправление потока стандартного вывода утилиты **ls**, запущенной с параметром, в файл:

.. code-block:: text

    ls -l > ~/foo-bar.txt

Перенаправление потока стандартного вывода в файл в режиме *добавления данных* (не заменяет существующие):

.. code-block:: text

    ls -l >> ~/foo-bar.txt

Перенаправление потока стандартного ввода на ввод из указанного файла:

.. code-block:: text

    sort < ~/foo-bar.txt

Перенаправление потока стандартного вывода и потока ошибок в файл:

.. code-block:: text

    /usr/bin/foo > ~/foo-bar.txt 2>$1

Комбинирование ввода из одного файла с выводом в другой с подавлением возникших ошибок:

.. code-block:: text

    /usr/bin/foo < ~/foo-bar.txt > ~/result.txt 2> /dev/null

.. index:: polkit, mount, password, rules
.. _mount-nopass:

Как разрешить монтирование любых дисков без ввода пароля?
============================================================

По умолчанию пароль не запрашивается только при монтировании сменных накопителей, однако если требуется реализовать это для любых, потребуется добавить новое правило Polkit.

Создадим новый конфиг:

.. code-block:: text

    sudo touch /etc/polkit-1/rules.d/10-mount-nopass.rules
    sudo chmod 0644 /etc/polkit-1/rules.d/10-mount-nopass.rules

Загрузим его в текстовом редакторе:

.. code-block:: text

    sudoedit /etc/polkit-1/rules.d/10-mount-nopass.rules

Добавим следующее правило:

.. code-block:: text

    polkit.addRule(function(action, subject) {
        if ((action.id == "org.freedesktop.udisks2.filesystem-mount-system" ||
            action.id == "org.freedesktop.udisks.filesystem-mount-system-internal") &&
            subject.local && subject.active && subject.isInGroup("wheel"))
        {
                return polkit.Result.YES;
        }
    });

Сохраним изменения в файле.

Теперь пользователи с :ref:`административными правами <admin-vs-user>` (входящие в группу **wheel**) смогут монтировать любые диски без ввода пароля.

.. index:: systemd, crash dump, coredump
.. _codedump-info:

Что такое coredump и почему systemd сохраняет их?
====================================================

Coredump - это дамп закрытой памяти процесса, создаваемый в момент возникновения в нём внештатной ситуации, приводящей к аварийному завершению. Эти дампы используются всевозможными системами анализа и необходимы для создания правильных :ref:`баг-репортов <bug-report>`.

По умолчанию systemd при падениях любых процессов (как системных, так и пользовательских), сохраняет дампы их закрытой памяти в каталоге **/var/lib/systemd/coredump**, поэтому он может занимать десятки гигабайт.

Возможно их :ref:`ограничить <codedump-limit>`, либо полностью :ref:`отключить <codedump-disable>`.

.. index:: systemd, crash dump, coredump, limit
.. _codedump-limit:

Как ограничить размер сохраняемых дампов памяти?
===================================================

Откроем файл конфигурации :ref:`systemd-coredump <codedump-info>`:

.. code-block:: text

    sudoedit /etc/systemd/coredump.conf

Внесём правки, убирая символ комментария **#** перед каждой строкой:

.. code-block:: ini

    [Coredump]
    Storage=external
    Compress=yes
    ProcessSizeMax=1G
    ExternalSizeMax=1G
    JournalSizeMax=200M
    MaxUse=5
    KeepFree=

В данном примере мы задаём максимальный размер одного дампа в 1 ГБ (**ProcessSizeMax** и **ProcessSizeMax**) с ограничением хранения не более 5 (**MaxUse**).

Изменения вступят в силу при следующей загрузке системы.

.. index:: systemd, crash dump, coredump, disable
.. _codedump-disable:

Как полностью отключение сохранение дампов памяти?
=====================================================

Откроем файл конфигурации :ref:`systemd-coredump <codedump-info>`:

.. code-block:: text

    sudoedit /etc/systemd/coredump.conf

Уберём символ комментария **#** лишь перед первой строкой и изменим её значение:

.. code-block:: ini

    [Coredump]
    Storage=none

Изменения вступят в силу при следующей загрузке системы.

.. index:: linux, kernel, postinstall, script, shell
.. _kernel-postinstall:

Как настроить автоматическое выполнение скрипта после установки нового ядра?
================================================================================

Для того, чтобы выполнять какой-либо shell-скрипт сразу после окончания установки ядра Linux, поместим его в каталог ``/etc/kernel/postinst.d`` с chmod **0755**.

Скрипты из него всегда выполняются в алфавитном порядке, т.е. **00-foo.sh** запустится раньше, чем **zz-bar.sh**, поэтому данную особенность можно использовать для изменения порядка их запуска.

Каждому скрипту в качестве параметра передаётся версия установленного ядра, которую можно получить через ``${1}``.

.. index:: linux, kernel, modprobe, secure boot, module
.. _modprobe-sberr:

При загрузке модуля ядра через modprobe я получаю ошибку. Как исправить?
===========================================================================

Если при попытке загрузки модуля ядра при помощи modprobe с правами суперпользователя воникает ошибка *modprobe: ERROR: could not insert 'XXXXXXX': Operation not permitted*, значит включён режим :ref:`UEFI Secure Boot <secure-boot>`, а данный модуль не имеет цифровой подписи.

Необходимо либо отключить Secure Boot в настройках UEFI компьютера, либо подписать его действительной цифровой подписью.

.. index:: boot, grub2, bootloader, uefi, efistub
.. _systemd-boot:

Как настроить загрузку системы при помощи systemd-boot?
==========================================================

См. `здесь <https://www.easycoding.org/2019/06/27/zagruzhaem-fedora-pri-pomoshhi-systemd-boot.html>`__.

.. index:: port, bind
.. _port-bind-priv:

Почему моё приложение не может использовать порт ниже 1024?
==============================================================

Диапазон портов 1-1023 зарезервирован для суперпользователя, а также приложений, наделённых его правами.

Стандартная схема использования: сервис запускается с правами root, начинает прослушивать необходимый ему порт, а затем :ref:`сбрасывает <euid-vs-ruid>` повышенные права. Так поступают большинство популярных серверных приложений (apache, nginx и т.д.).

Существует и альтернативный вариант - запуск при помощи :ref:`особого юнита systemd <port-bind-systemd>`.

.. index:: port, bind, systemd, unit
.. _port-bind-systemd:

Как запустить приложение на порту ниже 1024 при помощи systemd?
==================================================================

Добавим в :ref:`systemd-юнит <systemd-info>` ``foo-bar.service`` запрос привилегии ``CAP_NET_BIND_SERVICE``:

.. code-block:: ini

    [Unit]
    Description=Simple application
    After=network.target

    [Service]
    RestartSec=10s
    Type=simple
    User=user
    Group=user
    WorkingDirectory=/home/user/foo-bar
    ExecStart=/home/user/foo-bar/foo
    Restart=always
    AmbientCapabilities=CAP_NET_BIND_SERVICE

    [Install]
    WantedBy=multi-user.target

Теперь приложение сможет занять любой доступный порт, включая находящиеся в диапазоне 1-1023.
